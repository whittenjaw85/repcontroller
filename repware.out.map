Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o (exit)
/usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
                              serial.o (__do_copy_data)
/usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
                              serial.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

rxbuf               0x40              serial.o
txbuf               0x40              serial.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o
LOAD /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/libm.a
LOAD main.o
LOAD serial.o
LOAD /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x3de
 *(.vectors)
 .vectors       0x0000000000000000       0x98 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000098                . = ALIGN (0x2)
                0x0000000000000098                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000098        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000098                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000098                __ctors_start = .
 *(.ctors)
                0x0000000000000098                __ctors_end = .
                0x0000000000000098                __dtors_start = .
 *(.dtors)
                0x0000000000000098                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000098        0x0 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o
                0x0000000000000098                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000098        0xc /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000000000000a4       0x16 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
                0x00000000000000a4                __do_copy_data
 .init4         0x00000000000000ba       0x10 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
                0x00000000000000ba                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000000000000ca        0x8 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o
 *(.init9)
 *(.text)
 .text          0x00000000000000d2        0x4 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o
                0x00000000000000d2                __vector_22
                0x00000000000000d2                __vector_28
                0x00000000000000d2                __vector_1
                0x00000000000000d2                __vector_32
                0x00000000000000d2                __vector_34
                0x00000000000000d2                __vector_24
                0x00000000000000d2                __vector_12
                0x00000000000000d2                __bad_interrupt
                0x00000000000000d2                __vector_6
                0x00000000000000d2                __vector_31
                0x00000000000000d2                __vector_35
                0x00000000000000d2                __vector_3
                0x00000000000000d2                __vector_23
                0x00000000000000d2                __vector_30
                0x00000000000000d2                __vector_25
                0x00000000000000d2                __vector_11
                0x00000000000000d2                __vector_13
                0x00000000000000d2                __vector_17
                0x00000000000000d2                __vector_19
                0x00000000000000d2                __vector_7
                0x00000000000000d2                __vector_27
                0x00000000000000d2                __vector_5
                0x00000000000000d2                __vector_33
                0x00000000000000d2                __vector_37
                0x00000000000000d2                __vector_4
                0x00000000000000d2                __vector_9
                0x00000000000000d2                __vector_2
                0x00000000000000d2                __vector_21
                0x00000000000000d2                __vector_15
                0x00000000000000d2                __vector_36
                0x00000000000000d2                __vector_29
                0x00000000000000d2                __vector_8
                0x00000000000000d2                __vector_14
                0x00000000000000d2                __vector_10
                0x00000000000000d2                __vector_16
                0x00000000000000d2                __vector_18
                0x00000000000000d2                __vector_20
 .text          0x00000000000000d6        0x0 main.o
 .text          0x00000000000000d6      0x302 serial.o
                0x00000000000000d6                serial_init
                0x00000000000000fe                UART1_RX_vect
                0x0000000000000198                __vector_26
                0x0000000000000230                serial_rxchars
                0x000000000000023e                serial_popchar
                0x00000000000002a2                serial_writechar
                0x000000000000031c                serial_writeblock
                0x0000000000000354                serial_writestr
                0x000000000000037a                serial_writeblock_P
                0x00000000000003b2                serial_writestr_P
 .text          0x00000000000003d8        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
 .text          0x00000000000003d8        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
 .text          0x00000000000003d8        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
                0x00000000000003d8                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x00000000000003d8        0x2 main.o
                0x00000000000003d8                main
 .text.libgcc.mul
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.div
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
                0x00000000000003da                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000003da        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
                0x00000000000003da                exit
                0x00000000000003da                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000003da        0x4 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000003de                _etext = .

.data           0x0000000000800100        0x2 load address 0x00000000000003de
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o
 .data          0x0000000000800100        0x0 main.o
 .data          0x0000000000800100        0x1 serial.o
                0x0000000000800100                flowflags
 .data          0x0000000000800101        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800101        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
 .data          0x0000000000800101        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800102                . = ALIGN (0x2)
 *fill*         0x0000000000800101        0x1 00
                0x0000000000800102                _edata = .
                0x0000000000800102                PROVIDE (__data_end, .)

.bss            0x0000000000800102       0x84
                0x0000000000800102                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800102        0x0 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o
 .bss           0x0000000000800102        0x0 main.o
 .bss           0x0000000000800102        0x4 serial.o
                0x0000000000800102                txtail
                0x0000000000800103                txhead
                0x0000000000800104                rxtail
                0x0000000000800105                rxhead
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_copy_data.o)
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.7.0/avr5/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800106       0x80 serial.o
                0x0000000000800106                rxbuf
                0x0000000000800146                txbuf
                0x0000000000800186                PROVIDE (__bss_end, .)
                0x00000000000003de                __data_load_start = LOADADDR (.data)
                0x00000000000003e0                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800186        0x0
                0x0000000000800186                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800186                PROVIDE (__noinit_end, .)
                0x0000000000800186                _end = .
                0x0000000000800186                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x12a8
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o
 .stab          0x00000000000006cc      0x324 main.o
                                        0x330 (size before relaxing)
 .stab          0x00000000000009f0      0x8b8 serial.o
                                        0xa80 (size before relaxing)

.stabstr        0x0000000000000000      0xa76
 *(.stabstr)
 .stabstr       0x0000000000000000      0xa76 /usr/lib/gcc/avr/4.7.0/../../../avr/lib/avr5/crtusb646.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 main.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 serial.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(repware.out elf32-avr)
LOAD linker stubs
